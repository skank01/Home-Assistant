##############################
## Home Assistant restart
##############################
restart_home_assistant:
  alias: Restart
  icon: "mdi:restart"
  description: 'Zet home assistant in maintenance mode en herstart'
  sequence:
  - service: input_boolean.turn_on
    entity_id: input_boolean.maintenance_mode
  - service: homeassistant.restart


##############################
## TV aanzetten
##############################
tv_aanzetten:
  alias: Activiteiten TV
  icon: "mdi:television"
  mode: restart
  sequence:
    - choose:
        - conditions:
            - condition: state
              entity_id: media_player.living_tv
              state: "off"
          sequence:
            - service: media_player.turn_on
              entity_id: media_player.living_tv
            - delay: 00:00:15
    - choose:
        - conditions: "{{ actie == 'tv' }}"
          sequence:
            - service: media_player.select_source
              target:
                entity_id: media_player.living_tv
              data:
                source: TV VLAANDEREN
            - service: media_player.turn_off
              entity_id: media_player.shield_tv 
        - conditions: "{{ actie == 'netflix' }}"
          sequence:
            - service: media_player.select_source
              target:
                entity_id: media_player.living_tv
              data:
                source: Netflix
            - service: media_player.turn_off
              entity_id: media_player.shield_tv 
        - conditions: "{{ actie == 'film' }}"
          sequence:
            - service: media_player.select_source
              target:
                entity_id: media_player.living_tv
              data:
                source: HDMI2
            - service: media_player.turn_on
              entity_id: media_player.shield_tv 
        - conditions: "{{ actie == 'uit' }}"
          sequence:
            - service: media_player.turn_off
              entity_id: 
                - media_player.shield_tv 
                - media_player.living_tv
                
                
      

##############################
## Goodnight
##############################

welterusten:
  alias: Slaapwel
  icon: "mdi:bed"
  description: 'Slaapwel routine die alles op het gelijkvloers uitzet en de verlichting op het eerste verdiep aanzet.'
  sequence:
  - service: input_select.select_option
    target:
      entity_id: input_select.tv_modus
    data:
      option: "Uit"
  - service: light.turn_off
    data:
      entity_id: group.lights_groundfloor
  - service: light.turn_on
    data:
      entity_id: 
        - light.bench
        - light.trap_gelijkvloers
        - light.hal_wand
        - light.lavabo
        - light.nachtlampje_kim
  - delay: 00:02:00
  - service: light.turn_off
    data:
      entity_id: 
        - light.bench
        - light.trap_gelijkvloers
  - delay: 00:05:00
  - service: light.turn_off
    data:
      entity_id: light.hal_wand

    
##############################
## Taking a shower
##############################    

douche:
  alias: Douche nemen
  icon: "mdi:shower-head"
  description: 'Douche routine die het licht aanzet met bijpassende muziek'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.3
    entity_id: media_player.badkamer
  - service: spotcast.start
    data:
      entity_id: media_player.badkamer
      uri: 'spotify:playlist:37i9dQZF1DWSqmBTGDYngZ' 
      random_song: true
      shuffle: true
  - condition: state 
    entity_id: sun.sun
    state: 'below_horizon'
  - service: light.turn_on
    entity_id: light.douche

    
##############################
## Taking a bath
##############################

bad:
  alias: Bad nemen
  icon: "mdi:shower"
  description: 'Bad routine die het licht aanzet met bijpassende muziek'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.1
    entity_id: media_player.badkamer
  - service: spotcast.start
    data:
      entity_id: media_player.badkamer
      uri: 'spotify:playlist:37i9dQZF1DX4Q2SnB3glnP' 
      random_song: true
      shuffle: true
  - condition: state 
    entity_id: sun.sun
    state: 'below_horizon'
  - service: light.turn_on
    entity_id: light.bad
    
    
##############################
## Dinner
##############################

dinner:
  alias: Etentje met vrienden
  icon: "mdi:silverware-fork-knife"
  description: 'Etentje met vrienden die het juiste licht en playlist instelt'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.3
    entity_id: media_player.woonkamer
  - service: spotcast.start
    data:
      entity_id: media_player.woonkamer
      uri: 'spotify:playlist:37i9dQZF1DX4xuWVBs4FgJ' 
      random_song: true
      shuffle: true
    
    
##############################
## Ironing
##############################

ironing:
  alias: Strijken
  icon: "mdi:tshirt-crew"
  description: 'Strijken met muziek en licht'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.3
    entity_id: media_player.bureau
  - service: spotcast.start
    data:
      entity_id: media_player.bureau
      uri: 'spotify:playlist:6I8TafDQMeysc8S0glbwQL' 
      random_song: true
      shuffle: true
  

 
##############################
## Audio casting
##############################   
radio:
  alias: Activeer radio
  sequence:
    - service: media_player.volume_set
      data:
        entity_id: group.cast_player
        volume_level: '0.35'
    -  service: media_player.play_media
       data_template:
         entity_id: >
          {% if is_state("input_select.chromecast_speakers", "Keuken") %} media_player.keuken
          {% elif is_state("input_select.chromecast_speakers", "Woonkamer") %} media_player.woonkamer
          {% elif is_state("input_select.chromecast_speakers", "Bureau") %} media_player.bureau
          {% elif is_state("input_select.chromecast_speakers", "Badkamer") %} media_player.badkamer
          {% elif is_state("input_select.chromecast_speakers", "Slaapkamer Ouders") %} media_player.slaapkamer
          {% elif is_state("input_select.chromecast_speakers", "Slaapkamer Arne") %} media_player.slaapkamer_arne
          {% elif is_state("input_select.chromecast_speakers", "Slaapkamer Noor") %} media_player.slaapkamer_noor
          {% elif is_state("input_select.chromecast_speakers", "Overal") %} group.cast_player
          {% endif %}
         media_content_id: >
          {% if is_state("input_select.radio_station", "Studio Brussel") %} http://icecast.vrtcdn.be/stubru-high.mp3
          {% elif is_state("input_select.radio_station", "Q-Music") %} http://icecast-qmusic.cdp.triple-it.nl/Qmusic_be_live_64.aac
          {% elif is_state("input_select.radio_station", "MNM") %} http://icecast.vrtcdn.be/mnm_hits-high.mp3
          {% elif is_state("input_select.radio_station", "Radio 2") %} http://icecast.vrtcdn.be/ra2wvl-high.mp3
          {% elif is_state("input_select.radio_station", "Klara") %} http://icecast.vrtcdn.be/klara-high.mp3
          {% elif is_state("input_select.radio_station", "Ketnet Radio") %} http://icecast.vrtcdn.be/ketnetradio-high.mp3
          {% endif %}
         media_content_type: 'audio/mp4'
spotify:
  alias: Activeer Spotify
  sequence:
    -  service: spotcast.start
       data_template:
         entity_id: >
          {% if is_state("input_select.chromecast_speakers", "Keuken") %} media_player.keuken
          {% elif is_state("input_select.chromecast_speakers", "Woonkamer") %} media_player.woonkamer
          {% elif is_state("input_select.chromecast_speakers", "Bureau") %} media_player.bureau
          {% elif is_state("input_select.chromecast_speakers", "Badkamer") %} media_player.badkamer
          {% elif is_state("input_select.chromecast_speakers", "Slaapkamer Ouders") %} media_player.slaapkamer
          {% elif is_state("input_select.chromecast_speakers", "Slaapkamer Arne") %} media_player.slaapkamer_arne
          {% elif is_state("input_select.chromecast_speakers", "Slaapkamer Noor") %} media_player.slaapkamer_noor
          {% elif is_state("input_select.chromecast_speakers", "Overal") %} group.cast_player
          {% endif %}
         uri: >
          {% if is_state("input_select.spotify_afspeellijst", "Top 50 BelgiÃ«") %} spotify:playlist:37i9dQZEVXbJNSeeHswcKB
          {% elif is_state("input_select.spotify_afspeellijst", "The Greatest Switch") %} spotify:playlist:3dMgR1GWfuSLJeUUvUTZXV
          {% endif %}
         random_song: 'true'     
         shuffle: 'true'     


###########################################################################################################
## Script to resume radio/spotify after TTS on Google home speakers (version 27 aug 2021) thx to TheFes
###########################################################################################################

google_home_say:
  alias: "TTS for Google Home"
  description: Script for TTS messages to Google Home speakers
  icon: mdi:cast-audio
  mode: parallel
  fields: 
    tts_message:
      description: "Message to be uses as TTS for Google Home."
      example: "Hello, this is a test message."
      required: true
      selector:
        text:
    tts_target:
      description: "The target Google Home."
      example: media_player.google_keuken
      required: true
      selector:
        entity:
          integration: cast
          domain: media_player
    tts_volume:
      description: "Volume for TTS message (value between 0 and 1)."
      example: 0.25
      required: false
      selector:
        number:
          min: 0
          max: 1
          step: 0.05
          mode: slider
    restore_volume_all:
      description: "Restore volume of all TTS targets, will cause a short delay in sending the TTS"
      example: true
      required: false
      selector:
        boolean:
    volume_non_playing:
      description: "Default volume to restore non playing devces to (in %). Only used in case tts_volume is set, and restore_volume_all is not set to True"
      example: 25
      required: false
      selector:
        number:
          min: 0
          max: 100
          step: 5
          mode: slider
          unit_of_measurement: "%"
    speaker_group_split:
      description: "Set to True to split Google Home speaker groups in separate entities when sending the TTS"
      example: true
      required: false
      selector:
        boolean:
  variables:
    players_screen:
      - media_player.keuken
      - media_player.bureau
      - media_player.slaapkamer
      - media_player.slaapkamer_arne
      - media_player.slaapkamer_noor
    frequent_radio: 
      - icecast.vrtcdn.be
      - icecast-qmusic.cdp.triple-it.nl
    spotify_media_players: 
      - media_player.spotify_stijn_moke
    speaker_groups: []
    primary_spotcast: "stijn_moke"
    silent_mp3: "media-source://media_source/local/2-seconds-of-silence.mp3"
    default_volume_restore: True
    default_group_split: True
  sequence:
    - alias: "Convert input to lists if not provided as such"
      variables:
        tts_target_list: >
          {% set tts_list = tts_target.replace(' ' , '').split(',') if tts_target is string else tts_target %}
          {% set speaker_group_list = speaker_groups.replace(' ' , '').split(',') if speaker_groups is string else speaker_groups %}
          {% set tts_target_group =  tts_list | select('in', speaker_group_list) | list %}
          {% set tts_target_single = tts_list | reject('in', speaker_group_list) | list %}
          {% set tts_target_ha_group = (tts_target_group | join(',') | replace('media_player', 'group')).split(',') | list %}
          {% set tts_group_entities = expand(tts_target_ha_group) | map(attribute='entity_id') | list %}
          {% set single_not_in_group = tts_target_single | reject('in', tts_group_entities) | list %}
          {% if (speaker_group_split is not defined and default_group_split) or speaker_group_split  %}
            {{ tts_group_entities + single_not_in_group }}
          {% else %}
            {{ tts_target_group + single_not_in_group }}
          {% endif %}
        players_screen_list: >
          {{ 
            players_screen.replace(' ' , '').split(',') 
            if players_screen is string else players_screen
          }}
        frequent_radio_list: >
          {{ 
            frequent_radio.replace(' ' , '').split(',') 
            if frequent_radio is string else frequent_radio
          }}
        spotify_player_list: >
          {{ 
            spotify_media_players.replace(' ' , '').split(',') 
            if spotify_media_players is string else spotify_media_players
          }}
        speaker_group_list: >
          {{ 
            speaker_groups.replace(' ' , '').split(',') 
            if speaker_groups is string else speaker_groups
          }}
    - alias: "Deterimine which entities are playing and should be resumed"
      variables:
        players_to_resume: >
          {# determine which media_players are playing #}
            {% 
              set all_players_playing = states.media_player 
                                          | selectattr('state', 'eq', 'playing') 
                                          | map(attribute='entity_id') 
                                          | list  
            %}
          {# determine which Google Home speakers groups are playing #}
            {% 
              set all_speaker_groups_playing = all_players_playing 
                                                | select('in', speaker_group_list) 
                                                | list  
            %}
          {# determine which Home Assistant groups match those speaker groups #}
            {% if all_speaker_groups_playing | count > 0 %}
              {% 
                set all_ha_groups_playing = all_speaker_groups_playing 
                                                | replace('media_player', 'group')
              %}
            {% else %}
              {% set all_ha_groups_playing = [] %}
            {% endif %}            
          {# determine which of the tts_targets are playing  #}
            {% set tts_playing = tts_target_list | select('in', all_players_playing) | list %}
          {# determine which tts single targets are in a HA group which is playing which should be resumed #}
            {% set ns = namespace(groups = []) %}
              {% for group in all_ha_groups_playing %}
                {% for entity in state_attr(group, 'entity_id') if entity in tts_target_list %}
                  {% set ns.groups = ns.groups + [group] %}
                {% endfor %}
              {% endfor %}
            {% set ha_groups_resume = ns.groups | unique | list %}
          {# convert to Google Home speaker groups to be resumed #}
            {% if ha_groups_resume | count > 0 %}
              {% set speaker_groups_resume = ha_groups_resume | replace('group', 'media_player') %}
            {% else %}
              {% set speaker_groups_resume = [] %}
            {% endif %}
          {# determine which single tts targets are in a group which is playing #}
            {% set ns = namespace(reject = []) %}
            {% for group in ha_groups_resume %}
              {% set ns.reject = ns.reject + state_attr(group, 'entity_id') | list %}
            {% endfor %}
            {% set reject_list = ns.reject %}
          {# combine all the above to a list of players which should be resumed #}
          {{ (tts_playing + speaker_groups_resume) | reject('in', reject_list) | unique | list }}
    - alias: "Create lists with attributes of players to resume"
      variables: 
        tts_target_not_playing: >
          {{ tts_target_list | reject('in', players_to_resume) | list }}
        volume_old_list: >
          {{ expand(players_to_resume) | map(attribute='attributes.volume_level') | list }}
        app_name_list: >
          {{ expand(players_to_resume) | map(attribute='attributes.app_name') | list }}
        media_content_list: >
          {{ expand(players_to_resume) | map(attribute='attributes.media_content_id') | list }}
        media_artist_list: >
          {% set ns = namespace(artist = []) %}
          {% for media_player in players_to_resume %}
            {% set ns.artist = ns.artist + [ state_attr(media_player, 'media_artist') if not state_attr(media_player, 'media_artist') == none else 'no artist' ] | list %}
          {% endfor %}
          {{ ns.artist }}
        media_picture_list: >
          {{ expand(players_to_resume) | map(attribute='attributes.entity_picture') | list }}
        media_title_list: >
          {{ expand(players_to_resume) | map(attribute='attributes.media_title') | list }}
        spotify_playing: >
          {% set mp_names = expand(players_to_resume) | map(attribute='attributes.friendly_name') | list %}
          {{ 
              expand(spotify_player_list) | selectattr('state', 'eq', 'playing')
                                          | selectattr('attributes.source', 'in', mp_names)
                                          | map(attribute='entity_id') 
                                          | list 
          }}
        spotify_source: >
          {{ expand(spotify_playing) | map(attribute='attributes.source') | list }}
    - variables:
        volume_restore_required: >
          {{
            restore_volume_all if restore_volume_all is defined else default_volume_restore
            and tts_target_not_playing | count > 0
            and tts_volume is defined
          }}
    - alias: "Play silent MP3 if volume of non playing targets should be restored"
      choose:
        - conditions: "{{ volume_restore_required }}"
          sequence:
            - alias: "Play silent MP3"
              service: media_player.play_media
              target:
                entity_id: "{{ tts_target_not_playing }}"
              data:
                media_content_id: "{{ silent_mp3 }}"
                media_content_type: "audio/mp3"
            - delay: 2
    - variables:
        volume_old_not_playing: >
          {{ expand(tts_target_not_playing) | map(attribute='attributes.volume_level') | list }}
        screen_not_playing: >
          {{ tts_target_not_playing | select('in', players_screen_list) | list }}
    - alias: "Set volume to TTS volume if set"
      choose:
      - conditions:
          - alias: "TTS Volume set?"
            condition: template
            value_template: "{{ tts_volume is defined }}"
        sequence:
          - alias: "Apply TTS volume"
            service: media_player.volume_set
            target:
              entity_id: "{{ tts_target_list }}"
            data:
              volume_level: "{{ tts_volume if tts_volume < 1 else tts_volume / 100 }}"
    - alias: "Send TTS message"
      service: tts.cloud_say
      data:
        entity_id: "{{ tts_target_list }}"
        message: "{{ tts_message }}"
        language: nl-NL
        options:
          gender: male  
    - alias: "Short delay if required"
      choose:
      - conditions:
          - alias: "Delay required"
            condition: template
            value_template: >
              {{
                players_to_resume | count > 0
                or volume_restore_required
                or screen_not_playing | count > 0
              }}
        sequence:
          - delay: 2
    - alias: "Anything to resume?"
      choose:
        - conditions:
            - alias: "Anything playing"
              condition: template
              value_template: "{{ players_to_resume | count > 0 }}"
          sequence:
            - alias: "Resume players"
              repeat:
                count: "{{ players_to_resume | count }}"
                sequence:
                  - alias: "Variables for specific media_player"
                    variables:
                      spotify: >
                        {{ app_name_list[repeat.index -1] == 'Spotify' }}
                      radio: >
                        {{ 
                          app_name_list[repeat.index -1] == 'TuneIn Free'
                          or (
                                  media_content_list[repeat.index -1].split('//')[1]
                                    | default('no/tunein', true)
                                ).split('/')[0]
                            in frequent_radio_list
                        }}
                      spotcast_account: >
                        {% set mp_names = expand(players_to_resume) | map(attribute='attributes.friendly_name') | list %}
                        {% if app_name_list[repeat.index - 1] != 'Spotify' %}
                          Not Spotify
                        {% elif spotify_playing | count == 1 %}
                          {{ (spotify_playing | join).split('_')[2] }}
                        {% else %}
                          {{ 
                            spotify_playing[spotify_source.index(mp_names[repeat.index - 1])].split('_')[2] 
                            if mp_names[repeat.index - 1] in spotify_source 
                            else primary_spotcast 
                          }}
                        {% endif %}
                  - alias: "Wait until TTS message is complete"
                    wait_template: "{{ states(players_to_resume[repeat.index -1]) in ['idle', 'off'] }}"
                  - alias: "Set volume to old volume in case TTS volume was set"
                    choose:
                    - conditions:
                        - alias: "TTS Volume set?"
                          condition: template
                          value_template: "{{ tts_volume is defined }}"
                      sequence:
                        - alias: "Set volume back to old state"
                          service: media_player.volume_set
                          target:
                            entity_id: "{{ players_to_resume[repeat.index -1] }}"
                          data:
                            volume_level: "{{ volume_old_list[repeat.index -1] | float | round(2) }}"
                  - alias: "Resume playing"
                    choose:
                      - alias: "Spotify?"
                        conditions: "{{ spotify }}"
                        sequence:
                          - alias: "Primary spotcast account?"
                            choose:
                            - conditions: "{{ spotcast_account == primary_spotcast }}"
                              sequence:
                                - alias: "Resume spotify with primary spotcast account"
                                  service: spotcast.start
                                  data:
                                    entity_id: "{{ players_to_resume[repeat.index -1] }}"
                                    force_playback: true
                            default:
                              - alias: "Resume spotify with specific account"
                                service: spotcast.start
                                data:
                                  entity_id: "{{ players_to_resume[repeat.index -1] }}"
                                  account: "{{ spotcast_account }}"
                                  force_playback: true
                      - alias: "Radio?"
                        conditions: "{{ radio }}"
                        sequence:
                          - alias: "Resume radio"
                            service: media_player.play_media
                            target:
                              entity_id: "{{ players_to_resume[repeat.index -1] }}"
                            data:
                              media_content_id: "{{ media_content_list[repeat.index -1] }}"
                              media_content_type: "music"
                              extra:
                                title: "{{ media_artist_list[repeat.index -1] if not media_artist_list[repeat.index -1] == 'no artist' else media_title_list[repeat.index -1] }}"
                                thumb: "{{ media_picture_list[repeat.index -1] }}"
    - alias: "TTS sent to non playing devices?"
      condition: template
      value_template: "{{ tts_target_not_playing | count > 0 }}"
    - alias: "Set volume non playing entites back if required"
      choose:
        - conditions: "{{ volume_non_playing is defined or volume_restore_required }}"
          sequence:
            - alias: "Resume players"
              repeat:
                count: "{{ tts_target_not_playing | count }}"
                sequence:
                  - alias: "Wait until TTS message is complete"
                    wait_template: "{{ states(tts_target_not_playing[repeat.index -1]) in ['idle', 'off'] }}"
                  - alias: "Set volume back to old state"
                    service: media_player.volume_set
                    target:
                      entity_id: "{{ tts_target_not_playing[repeat.index -1] }}"
                    data:
                      volume_level: >
                        {% if volume_restore_required %}
                          {{ volume_old_not_playing[repeat.index -1] | float | round(2) }}
                        {% else %}
                          {{ volume_non_playing if volume_non_playing < 1 else volume_non_playing / 100 }}
                        {% endif %}
    - alias: "Google Home with screen?"
      choose: 
        - conditions: "{{ screen_not_playing | count > 0 }}"
          sequence:
            - alias: "Resume players"
              repeat:
                count: "{{ screen_not_playing | count }}"
                sequence:
                  - alias: "Wait until TTS message is complete"
                    wait_template: "{{ states(screen_not_playing[repeat.index -1]) in ['idle', 'off'] }}"
                  - alias: "Turn Google Home on to return to idle mode (photo display)"
                    service: media_player.turn_on
                    target:
                      entity_id: "{{ screen_not_playing | select('in', players_screen_list) | list }}"



############################################################ 
## Script to send messages using Lovelace dashboard
############################################################    

google_say_dashboard:
  alias: "TTS Lovelace Dashboard"
  description: Script to send messages using Lovelace dashboard
  icon: mdi:cast-audio
  mode: single
  sequence:
    - alias: "Change volume while casting?"
      choose:
        - conditions:
            - alias: "Input boolean on?"
              condition: state
              entity_id: input_boolean.tts_volume
              state: "on"
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.google_home_say
              data:
                variables:
                  tts_message: "{{ states('input_text.tts_message') }}"
                  tts_volume: "{{ states('input_number.tts_volume') | float / 100 | round(2) }}"
                  tts_target: >
                    {{ 
                        expand('group.tts_google_home') 
                            | selectattr('state', 'eq', 'on') 
                            | map(attribute='entity_id') 
                            | list
                            | replace('input_boolean', 'media_player')
                    }}
                  restore_volume_all: "{{ is_state('input_boolean.restore_volume_all', 'on') }}"
                  volume_non_playing: "{{ states('input_number.volume_non_playing') | float / 100 | round(2) }}"
      default:
        - service: script.turn_on
          target:
            entity_id: script.google_home_say
          data:
            variables:
              tts_message: "{{ states('input_text.tts_message') }}"
              tts_target: >
                {{ 
                    expand('group.tts_google_home') 
                        | selectattr('state', 'eq', 'on') 
                        | map(attribute='entity_id') 
                        | list
                        | replace('input_boolean', 'media_player')
                }}
    - service: input_number.set_value
      target:
        entity_id: input_number.tts_volume
      data:
        value: 25
    - service: input_text.set_value
      target:
        entity_id: input_text.tts_message
      data:
        value: ""
    - service: homeassistant.turn_off
      target:
        entity_id: group.tts_google_home