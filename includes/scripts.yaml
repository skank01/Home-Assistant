##############################
## Home Assistant restart
##############################
restart_home_assistant:
  alias: Restart
  icon: "mdi:restart"
  description: 'Zet home assistant in maintenance mode en herstart'
  sequence:
  - service: input_boolean.turn_on
    entity_id: input_boolean.maintenance_mode
  - service: homeassistant.restart


##############################
## TV aanzetten
##############################
tv_aanzetten:
  alias: Activiteiten TV
  icon: "mdi:television"
  mode: restart
  sequence:
    - choose:
        - conditions:
            - condition: state
              entity_id: media_player.living_tv
              state: "off"
          sequence:
            - service: media_player.turn_on
              entity_id: media_player.living_tv
            - delay: 00:00:15
    - choose:
        - conditions: "{{ actie == 'tv' }}"
          sequence:
            - service: media_player.select_source
              target:
                entity_id: media_player.living_tv
              data:
                source: TV VLAANDEREN
            - service: media_player.turn_off
              entity_id: media_player.shield_tv 
        - conditions: "{{ actie == 'netflix' }}"
          sequence:
            - service: media_player.select_source
              target:
                entity_id: media_player.living_tv
              data:
                source: Netflix
            - service: media_player.turn_off
              entity_id: media_player.shield_tv 
        - conditions: "{{ actie == 'film' }}"
          sequence:
            - service: media_player.select_source
              target:
                entity_id: media_player.living_tv
              data:
                source: HDMI2
            - service: media_player.turn_on
              entity_id: media_player.shield_tv 
        - conditions: "{{ actie == 'uit' }}"
          sequence:
            - service: media_player.turn_off
              entity_id: 
                - media_player.shield_tv 
                - media_player.living_tv
                
                
      

##############################
## Goodnight
##############################

welterusten:
  alias: Slaapwel
  icon: "mdi:bed"
  description: 'Slaapwel routine die alles op het gelijkvloers uitzet en de verlichting op het eerste verdiep aanzet.'
  sequence:
  - service: input_select.select_option
    target:
      entity_id: input_select.tv_modus
    data:
      option: "Uit"
  - service: light.turn_off
    data:
      entity_id: group.lights_groundfloor
  - service: switch.turn_off
    data:
      entity_id: switch.terras
  - service: light.turn_on
    data:
      entity_id: 
        - light.bench
        - light.trap_gelijkvloers
        - light.hal_wand
        - light.lavabo
        - light.nachtlampje_kim
  - delay: 00:02:00
  - service: light.turn_off
    data:
      entity_id: 
        - light.bench
        - light.trap_gelijkvloers
  - delay: 00:05:00
  - service: light.turn_off
    data:
      entity_id: light.hal_wand

    
##############################
## Taking a shower
##############################    

douche:
  alias: Douche nemen
  icon: "mdi:shower-head"
  description: 'Douche routine die het licht aanzet met bijpassende muziek'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.3
    entity_id: media_player.badkamer
  - service: spotcast.start
    data:
      entity_id: media_player.badkamer
      uri: 'spotify:playlist:37i9dQZF1DWSqmBTGDYngZ' 
      random_song: true
      shuffle: true
  - condition: state 
    entity_id: sun.sun
    state: 'below_horizon'
  - service: light.turn_on
    entity_id: light.douche

    
##############################
## Taking a bath
##############################

bad:
  alias: Bad nemen
  icon: "mdi:shower"
  description: 'Bad routine die het licht aanzet met bijpassende muziek'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.1
    entity_id: media_player.badkamer
  - service: spotcast.start
    data:
      entity_id: media_player.badkamer
      uri: 'spotify:playlist:37i9dQZF1DX4Q2SnB3glnP' 
      random_song: true
      shuffle: true
  - condition: state 
    entity_id: sun.sun
    state: 'below_horizon'
  - service: light.turn_on
    entity_id: light.bad
    
    
##############################
## Dinner
##############################

dinner:
  alias: Etentje met vrienden
  icon: "mdi:silverware-fork-knife"
  description: 'Etentje met vrienden die het juiste licht en playlist instelt'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.3
    entity_id: media_player.woonkamer
  - service: spotcast.start
    data:
      entity_id: media_player.woonkamer
      uri: 'spotify:playlist:37i9dQZF1DX4xuWVBs4FgJ' 
      random_song: true
      shuffle: true
    
    
##############################
## Ironing
##############################

ironing:
  alias: Strijken
  icon: "mdi:tshirt-crew"
  description: 'Strijken met muziek en licht'
  sequence:
  - service: media_player.volume_set
    data:
      volume_level: 0.3
    entity_id: media_player.bureau
  - service: spotcast.start
    data:
      entity_id: media_player.bureau
      uri: 'spotify:playlist:6I8TafDQMeysc8S0glbwQL' 
      random_song: true
      shuffle: true
  

 
##############################
## Audio casting
##############################   
radio:
  alias: Activeer radio
  sequence:
    - service: media_player.volume_set
      data:
        entity_id: group.cast_player
        volume_level: '0.35'
    -  service: media_player.play_media
       data_template:
         entity_id: >
          {% if is_state("input_select.chromecast_speakers_radio", "Keuken") %} media_player.keuken
          {% elif is_state("input_select.chromecast_speakers_radio", "Woonkamer") %} media_player.woonkamer
          {% elif is_state("input_select.chromecast_speakers_radio", "Bureau") %} media_player.bureau
          {% elif is_state("input_select.chromecast_speakers_radio", "Badkamer") %} media_player.badkamer
          {% elif is_state("input_select.chromecast_speakers_radio", "Slaapkamer Ouders") %} media_player.slaapkamer
          {% elif is_state("input_select.chromecast_speakers_radio", "Slaapkamer Arne") %} media_player.slaapkamer_arne
          {% elif is_state("input_select.chromecast_speakers_radio", "Slaapkamer Noor") %} media_player.slaapkamer_noor
          {% elif is_state("input_select.chromecast_speakers_radio", "Overal") %} group.cast_player
          {% endif %}
         media_content_id: >
          {% if is_state("input_select.radio_station", "Studio Brussel") %} http://icecast.vrtcdn.be/stubru-high.mp3
          {% elif is_state("input_select.radio_station", "Q-Music") %} http://icecast-qmusic.cdp.triple-it.nl/Qmusic_be_live_64.aac
          {% elif is_state("input_select.radio_station", "MNM") %} http://icecast.vrtcdn.be/mnm_hits-high.mp3
          {% elif is_state("input_select.radio_station", "Radio 2") %} http://icecast.vrtcdn.be/ra2wvl-high.mp3
          {% elif is_state("input_select.radio_station", "Klara") %} http://icecast.vrtcdn.be/klara-high.mp3
          {% elif is_state("input_select.radio_station", "Ketnet Radio") %} http://icecast.vrtcdn.be/ketnetradio-high.mp3
          {% endif %}
         media_content_type: 'audio/mp4'

spotify_start_stijn:
  alias: 'Spotify Stijn: afspelen'
  sequence:
    - service: spotcast.start
      data:
        force_playback: true
        entity_id: >
          {% if is_state("input_select.chromecast_speakers_stijn", "Keuken") %} media_player.keuken
          {% elif is_state("input_select.chromecast_speakers_stijn", "Woonkamer") %} media_player.woonkamer
          {% elif is_state("input_select.chromecast_speakers_stijn", "Bureau") %} media_player.bureau
          {% elif is_state("input_select.chromecast_speakers_stijn", "Badkamer") %} media_player.badkamer
          {% elif is_state("input_select.chromecast_speakers_stijn", "Slaapkamer Ouders") %} media_player.slaapkamer
          {% elif is_state("input_select.chromecast_speakers_stijn", "Slaapkamer Arne") %} media_player.slaapkamer_arne
          {% elif is_state("input_select.chromecast_speakers_stijn", "Slaapkamer Noor") %} media_player.slaapkamer_noor
          {% elif is_state("input_select.chromecast_speakers_stijn", "Overal") %} group.cast_player
          {% endif %}
  mode: single
  icon: mdi:spotify
  
spotify_start_kim:
  alias: 'Spotify Kim: afspelen'
  sequence:
    - service: spotcast.start
      data:
        force_playback: true
        entity_id: >
          {% if is_state("input_select.chromecast_speakers_kim", "Keuken") %} media_player.keuken
          {% elif is_state("input_select.chromecast_speakers_kim", "Woonkamer") %} media_player.woonkamer
          {% elif is_state("input_select.chromecast_speakers_kim", "Bureau") %} media_player.bureau
          {% elif is_state("input_select.chromecast_speakers_kim", "Badkamer") %} media_player.badkamer
          {% elif is_state("input_select.chromecast_speakers_kim", "Slaapkamer Ouders") %} media_player.slaapkamer
          {% elif is_state("input_select.chromecast_speakers_kim", "Slaapkamer Arne") %} media_player.slaapkamer_arne
          {% elif is_state("input_select.chromecast_speakers_kim", "Slaapkamer Noor") %} media_player.slaapkamer_noor
          {% elif is_state("input_select.chromecast_speakers_kim", "Overal") %} group.cast_player
          {% endif %}
        account: kim  
  mode: single
  icon: mdi:spotify 
  
spotify_start_arne:
  alias: 'Spotify Arne: afspelen'
  sequence:
    - service: spotcast.start
      data:
        force_playback: true
        entity_id: >
          {% if is_state("input_select.chromecast_speakers_arne", "Keuken") %} media_player.keuken
          {% elif is_state("input_select.chromecast_speakers_arne", "Woonkamer") %} media_player.woonkamer
          {% elif is_state("input_select.chromecast_speakers_arne", "Bureau") %} media_player.bureau
          {% elif is_state("input_select.chromecast_speakers_arne", "Badkamer") %} media_player.badkamer
          {% elif is_state("input_select.chromecast_speakers_arne", "Slaapkamer Ouders") %} media_player.slaapkamer
          {% elif is_state("input_select.chromecast_speakers_arne", "Slaapkamer Arne") %} media_player.slaapkamer_arne
          {% elif is_state("input_select.chromecast_speakers_arne", "Slaapkamer Noor") %} media_player.slaapkamer_noor
          {% elif is_state("input_select.chromecast_speakers_arne", "Overal") %} group.cast_player
          {% endif %}
        account: arne  
  mode: single
  icon: mdi:spotify  
  
spotify_start_noor:
  alias: 'Spotify Noor: afspelen'
  sequence:
    - service: spotcast.start
      data:
        force_playback: true
        entity_id: >
          {% if is_state("input_select.chromecast_speakers_noor", "Keuken") %} media_player.keuken
          {% elif is_state("input_select.chromecast_speakers_noor", "Woonkamer") %} media_player.woonkamer
          {% elif is_state("input_select.chromecast_speakers_noor", "Bureau") %} media_player.bureau
          {% elif is_state("input_select.chromecast_speakers_noor", "Badkamer") %} media_player.badkamer
          {% elif is_state("input_select.chromecast_speakers_noor", "Slaapkamer Ouders") %} media_player.slaapkamer
          {% elif is_state("input_select.chromecast_speakers_noor", "Slaapkamer Arne") %} media_player.slaapkamer_arne
          {% elif is_state("input_select.chromecast_speakers_noor", "Slaapkamer Noor") %} media_player.slaapkamer_noor
          {% elif is_state("input_select.chromecast_speakers_noor", "Overal") %} group.cast_player
          {% endif %}
        account: noor  
  mode: single
  icon: mdi:spotify  
  
  
###########################################################################################################
## Script to resume radio/spotify after TTS on Google home speakers (version 27 aug 2021) thx to TheFes
###########################################################################################################

google_home_say:
  alias: "00 🔊 TTS for Google Home"
  description: Script for TTS messages to Google Home speakers
  icon: mdi:cast-audio
  mode: parallel
  fields:
    tts_message:
      description: "Message to be uses as TTS for Google Home."
      example: "Hello, this is a test message."
      required: true
      selector:
        text:
    tts_target:
      description: "The target Google Home."
      example: media_player.kitchen_hub
      required: true
      selector:
        entity:
          integration: cast
          domain: media_player
    tts_volume:
      description: "Volume for TTS message (in %)."
      example: 25
      required: false
      selector:
        number:
          min: 0
          max: 100
          step: 5
          mode: slider
          unit_of_measurement: "%"
    speaker_group_split:
      description: "Set to True to split Google Home speaker groups in separate entities when sending the TTS"
      example: true
      required: false
      selector:
        boolean:
  variables:
    tts_service: tts.google_cloud_say
    service_data:
    players_screen:
      - media_player.keuken
      - media_player.bureau
      - media_player.slaapkamer
      - media_player.slaapkamer_arne
      - media_player.slaapkamer_noor
    primary_spotcast: "stijn"
    default_volume_level: 0.25
    default_group_split: False
  sequence:
    - alias: "Set variables to be used in the script"
      variables:
        speaker_group_list: "{{ speaker_groups.keys() | list if speaker_groups is defined else [] }}"
        tts_target_list: >
          {%- if voice_tts_target is defined %}
            {{ [ voice_tts_target ] }}
          {%- else %}
            {%- set tts_list = tts_target.replace(' ' , '').split(',') if tts_target is string else tts_target %}
            {%- set tts_target_group =  tts_list | select('in', speaker_group_list) | list %}
            {%- set tts_target_single = tts_list | reject('in', speaker_group_list) | list %}
            {%- set ns = namespace(single = []) %}
            {%- for group in tts_target_group %}
              {%- set ns.single = ns.single + speaker_groups[group] %}
            {%- endfor %}
            {%- set tts_group_entities = ns.single | unique | list %}
            {%- set single_not_in_group = tts_target_single | reject('in', tts_group_entities) | list %}
            {%- if speaker_group_split | default(default_group_split | default(False)) %}
              {{ tts_group_entities + single_not_in_group }}
            {%- else %}
              {{ tts_target_group + single_not_in_group }}
            {%- endif %}
          {%- endif %}
        players_to_resume: >
          {# use data from google_home_say_voice script in case it was used #}
            {%- if voice_media_player_data is defined %}
              {{ voice_media_player_data }}
            {%- else %}
              {# determine which media_players are playing and store attributes#}
                {%- 
                  set all_players_playing = states.media_player 
                                              | selectattr('state', 'eq', 'playing') 
                                              | map(attribute='entity_id') 
                                              | list  
                %}
          {# determine which Google Home speakers groups are playing #}
                {%- 
                  set all_speaker_groups_playing =  voice_groups | default(
                                                    all_players_playing 
                                                      | select('in', speaker_group_list) 
                                                      | list )
                %}
              {# determine which of the tts_targets (including groups members) are playing  #}
                {%- set ns = namespace(tts_targets = []) %}
                  {%- for target in tts_target_list %}
                    {%- set ns.tts_targets = ns.tts_targets +  (
                                                                speaker_groups[target] 
                                                                if target in speaker_group_list 
                                                                else [ target ] 
                                                              ) 
                    %}
                  {%- endfor %}
                {%- set tts_playing = ns.tts_targets | select('in', all_players_playing) | list %}
              {# determine which groups should be resumed becaue a single tts target is part of that group #}
                {%- set ns = namespace(groups = []) %}
                  {%- for group in all_speaker_groups_playing %}
                    {%- for entity in speaker_groups[group] if entity in tts_playing %}
                      {%- set ns.groups = ns.groups + [group] %}
                    {%- endfor %}
                  {%- endfor %}
                {%- set speaker_groups_resume = ns.groups | unique | list %}
              {# determine if tts target has subgroups which are playing and add to speaker_groups_resume #}
                {%- set ns = namespace(groups = []) %}
                  {%- for target in tts_target_list %}
                    {%- set ns.groups = ns.groups + 
                        (sub_groups[target] | select('in', all_speaker_groups_playing) | list)
                        if sub_groups is defined else []     
                  %}
                  {%- endfor %}
                {%- set speaker_groups_resume = speaker_groups_resume + ns.groups | unique | list %}
              {# determine which single entities are in a group which is going to be resumed #}
                {%- set ns = namespace(reject = []) %}
                {%- for group in speaker_groups_resume %}
                  {%- set ns.reject = ns.reject + speaker_groups[group] %}
                {%- endfor %}
                {%- set reject_list = ns.reject %}
              {# determine which single playing entities are in a group which is a tts_target #}
                {%- set tts_target_group = tts_target_list | select('in', speaker_group_list) | reject('in', all_speaker_groups_playing) |list %}
                {%- set ns = namespace(single_resume = []) %}
                {%- for group in tts_target_group %}
                  {%- set ns.single_resume = ns.single_resume + speaker_groups[group] | select('in', all_players_playing) | list %}
                {%- endfor %}
                {%- set single_resume_list = ns.single_resume %}
              {# combine all the above to a list of players which should be resumed #}
                {%- set players_resume = (tts_playing + speaker_groups_resume + single_resume_list) | reject('in', reject_list) | unique | list %}
                {%- set ns = namespace(info=[]) %}
                {%- for entity in expand(players_resume) %}
                  {%- set ns.info = ns.info +  [ 
                                                dict(
                                                  entity_id = entity.entity_id,
                                                  friendly_name = entity.attributes.friendly_name, 
                                                  media_content_id = entity.attributes.media_content_id | default('no media_content'),
                                                  media_title = entity.attributes.media_title | default('no title'),
                                                  media_artist = entity.attributes.media_artist | default('No artist'),
                                                  media_content_type = entity.attributes.media_content_type | default('no type'),
                                                  app_name = entity.attributes.app_name | default('no app'),
                                                  entity_picture = entity.attributes.entity_picture | default('no pic'),
                                                  volume_level = entity.attributes.volume_level | round(2) 
                                                  )
                                              ] 
                  %}
                {%- endfor %}
                {{ ns.info }}
            {%- endif %}
        tts_target_not_playing: >
          {%- set players_resume_entity = players_to_resume | map(attribute='entity_id') | list %}
          {%- set ns = namespace(members = []) %}
          {%- for entity in players_resume_entity %}
            {%- if entity in speaker_group_list %}
              {%- set ns.members = ns.members + speaker_groups[entity] | list %}
            {%- endif %}
          {%- endfor %}
          {%- set players_resume_all = players_resume_entity + ns.members %}
          {{ tts_target_list | reject('in', players_resume_all) | list }}
        spotify_players_info: >
          {%- 
            set spotify_player_list = states.media_player 
                                        | selectattr('state', 'eq', 'playing')
                                        | selectattr('entity_id', 'search', 'media_player.spotify') 
                                        | map(attribute='entity_id') 
                                        | list
          %}
          {%- set entities = expand(spotify_player_list) %}
          {%- set ns = namespace(info=[]) %}
          {%- for entity in entities %}
            {%- set ns.info = ns.info + [ dict(entity_id=entity.entity_id, source=entity.attributes.source) ] %}
          {%- endfor %}
          {{ ns.info }}
        volume_restore_required: >
          {{
            tts_target_not_playing | count > 0
            and (True if tts_volume else False)
          }}
    - alias: "Turn non playing entities on if needed"
      choose:
        - conditions: "{{ volume_restore_required }}"
          sequence:
            - alias: "Turn non playing entities on"
              service: media_player.turn_on
              target:
                entity_id: "{{ tts_target_not_playing }}"
            - delay: 0.25
    - variables:
        volume_old_not_playing: >
          {%- set entities = expand(tts_target_not_playing) %}
          {%- set ns = namespace(info=[]) %}
          {%- set volume = default_volume_level | default(0.25) %}
          {%- set volume_restore = volume if volume < 1 else [1, volume / 100] | min %}
          {%- for entity in entities %}
            {%- set ns.info = ns.info +  [
                                        dict(
                                          entity_id = entity.entity_id, 
                                          volume_level = entity.attributes.volume_level | default(
                                                                                                    volume_restore
                                                                                                  ) | round(2)
                                          ) 
                                        ] 
            %}
          {%- endfor %}
          {{ ns.info }}
        screen_not_playing: >
          {{ [] if not players_screen else tts_target_not_playing | select('in', players_screen) | list }}
    - alias: "Send TTS message"
      service: "{{ tts_service }}"
      target:
        entity_id: "{{ tts_target_list }}"
      data: >
        {%- if service_data %}
          {{ dict( message = tts_message, **service_data ) }}
        {%- else %}
          {{ dict( message = tts_message ) }}
        {%- endif %}
    - alias: "Set volume to TTS volume if set"
      choose:
        - conditions:
            - alias: "TTS Volume set?"
              condition: template
              value_template: "{{ True if tts_volume else False }}"
          sequence:
            - alias: "Wait first tts_target is idle or off (will prevent volume change of stream in case there is only one target)"
              wait_template: "{{ states(tts_target_list[0]) in ['idle', 'off'] }}"
            - alias: "Apply TTS volume"
              service: media_player.volume_set
              target:
                entity_id: "{{ tts_target_list }}"
              data:
                volume_level: "{{ tts_volume if tts_volume < 1 else tts_volume / 100 }}"
    - alias: "Short delay if required"
      choose:
        - conditions:
            - alias: "Delay required"
              condition: template
              value_template: >
                {{
                  players_to_resume | count > 0
                  or volume_restore_required
                  or screen_not_playing | count > 0
                }}
          sequence:
            - delay: 4
    - alias: "Anything to resume?"
      choose:
        - conditions:
            - alias: "Anything playing"
              condition: template
              value_template: "{{ players_to_resume | count > 0 }}"
          sequence:
            - alias: "Resume players"
              repeat:
                count: "{{ players_to_resume | count }}"
                sequence:
                  - alias: "Variables for specific media_player"
                    variables:
                      player: "{{ players_to_resume[repeat.index - 1] }}"
                      spotify: >
                        {{ player.app_name == 'Spotify' }}
                      stream: >
                        {{ 
                          (player.media_content_id).startswith('http')
                        }}
                      spotcast_account: >
                        {%- if voice_spotcast %}
                          {{ voice_spotcast }}
                        {%- else %}
                          {%- if player.app_name != 'Spotify' %}
                            {%- set spotcast = 'Not Spotify' %}
                          {%- else %}
                            {%- set entity = player.entity_id %}
                            {%- if speaker_groups and speaker_groups[entity] %}
                              {%- set members = speaker_groups[entity] %}
                            {%- else %}
                              {%- set members = [] %}
                            {%- endif %}
                            {%- set list_check = [ player.entity_id ] + members %}
                            {%- set names_check = expand(list_check) | map(attribute='name') | list %}
                              {%- set spotcast =  spotify_players_info
                                                  | selectattr('source', 'in', names_check) 
                                                  | map(attribute='entity_id') 
                                                  | join 
                                                  | replace('media_player.spotify_', '')
                                  
                              %}
                          {%- endif %}
                            {{ spotcast if spotcast else primary_spotcast }}
                        {%- endif %}
                  - alias: "Wait until player is idle again"
                    wait_template: "{{ states(player.entity_id) in ['idle', 'off'] }}"
                  - alias: "Set volume to old volume if needed"
                    choose:
                      - conditions:
                          - alias: "Volume restore needed"
                            condition: template
                            value_template: >
                              {{
                                player.volume_level | round(2, default=0) 
                                != state_attr(player.entity_id, 'volume_level') | round(2, default=0)
                              }}
                        sequence:
                          - alias: "Set volume back to old state"
                            service: media_player.volume_set
                            target:
                              entity_id: "{{ player.entity_id }}"
                            data:
                              volume_level: "{{ player.volume_level | float(default=default_volume_level | default(0.25)) | round(2) }}"
                  - alias: "Resume playing"
                    choose:
                      - alias: "Spotify?"
                        conditions: "{{ spotify }}"
                        sequence:
                          - alias: "Primary spotcast account?"
                            choose:
                              - conditions: "{{ spotcast_account == primary_spotcast }}"
                                sequence:
                                  - alias: "Resume spotify with primary spotcast account"
                                    service: spotcast.start
                                    data:
                                      entity_id: "{{ player.entity_id }}"
                                      force_playback: true
                            default:
                              - alias: "Resume spotify with specific account"
                                service: spotcast.start
                                data:
                                  entity_id: "{{ player.entity_id }}"
                                  account: "{{ spotcast_account }}"
                                  force_playback: true
                      - alias: "Stream?"
                        conditions: "{{ stream }}"
                        sequence:
                          - alias: "Resume stream"
                            service: media_player.play_media
                            target:
                              entity_id: "{{ player.entity_id }}"
                            data:
                              media_content_id: >
                                {{ player.media_content_id }}
                              media_content_type: "music"
                              extra:
                                title: >
                                  {%- if player.app_name.startswith('TuneIn') %}
                                    {{ player.media_artist }}
                                  {%- else %}
                                    {{ player.media_title }}
                                  {%- endif %}
                                thumb: >
                                  {{
                                    fixed_picture[player.media_artist] | default(player.entity_picture)
                                    if  fixed_picture
                                    else player.entity_picture
                                  }}
    - alias: "Restore volume of non playing entities"
      choose:
        - conditions:
            - alias: "Restore required?"
              condition: template
              value_template: >
                {{ 
                  target_not_playing | count > 0 
                }}
          sequence:
            - alias: "Adjust volume"
              repeat:
                count: "{{ volume_old_not_playing | count }}"
                sequence:
                  - alias: "Variables for specific media_player"
                    variables:
                      player: "{{ volume_old_not_playing[repeat.index -1] }}"
                  - alias: "Wait until entity is idle or off"
                    wait_template: "{{ states(player.entity_id) in ['idle', 'off'] }}"
                  - alias: "Set volume to old volume if needed"
                    choose:
                      - conditions:
                          - alias: "Volume restore needed"
                            condition: template
                            value_template: >
                              {{
                                player.volume_level | round(2, default=0) 
                                != state_attr(player.entity_id, 'volume_level') | round(2, default=0)
                              }}
                        sequence:
                          - alias: "Set volume back to old state"
                            service: media_player.volume_set
                            target:
                              entity_id: "{{ player.entity_id }}"
                            data:
                              volume_level: >
                                {{ player.volume_level | float(default=default_volume_level | default(0.25)) | round(2) }}
    - alias: "Google Home with screen back to idle screen"
      choose:
        - conditions: "{{ screen_not_playing | count > 0 }}"
          sequence:
            - alias: "Restore default screen"
              repeat:
                count: "{{ screen_not_playing | count }}"
                sequence:
                  - variables:
                      player: "{{ screen_not_playing[repeat.index -1] }}"
                  - alias: "Wait until player is idle or off"
                    wait_template: "{{ states(player) in ['idle', 'off'] }}"
                  - alias: "Turn Google Home on to return to idle mode (photo display)"
                    service: media_player.turn_on
                    target:
                      entity_id: "{{ player }}"


############################################################ 
## Script to send messages using Lovelace dashboard
############################################################    

google_say_dashboard:
  alias: "TTS Lovelace Dashboard"
  description: Script to send messages using Lovelace dashboard
  icon: mdi:cast-audio
  mode: single
  sequence:
    - alias: "Change volume while casting?"
      choose:
        - conditions:
            - alias: "Input boolean on?"
              condition: state
              entity_id: input_boolean.tts_volume
              state: "on"
          sequence:
            - service: script.turn_on
              target:
                entity_id: script.google_home_say
              data:
                variables:
                  tts_message: "{{ states('input_text.tts_message') }}"
                  tts_volume: "{{ states('input_number.tts_volume') | float / 100 | round(2) }}"
                  tts_target: >
                    {{ 
                        expand('group.tts_google_home') 
                            | selectattr('state', 'eq', 'on') 
                            | map(attribute='entity_id') 
                            | list
                            | replace('input_boolean', 'media_player')
                    }}
                  restore_volume_all: "{{ is_state('input_boolean.restore_volume_all', 'on') }}"
                  volume_non_playing: "{{ states('input_number.volume_non_playing') | float / 100 | round(2) }}"
      default:
        - service: script.turn_on
          target:
            entity_id: script.google_home_say
          data:
            variables:
              tts_message: "{{ states('input_text.tts_message') }}"
              tts_target: >
                {{ 
                    expand('group.tts_google_home') 
                        | selectattr('state', 'eq', 'on') 
                        | map(attribute='entity_id') 
                        | list
                        | replace('input_boolean', 'media_player')
                }}
    - service: input_number.set_value
      target:
        entity_id: input_number.tts_volume
      data:
        value: 25
    - service: input_text.set_value
      target:
        entity_id: input_text.tts_message
      data:
        value: ""
    - service: homeassistant.turn_off
      target:
        entity_id: group.tts_google_home